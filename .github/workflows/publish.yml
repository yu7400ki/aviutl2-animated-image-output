name: Build and Draft Release for Plugin

on:
  push:
    tags:
      - "apng-v*.*.*"
      - "gif-v*.*.*"
      - "webp-v*.*.*"
      - "avif-v*.*.*"

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    env:
      CARGO_TERM_COLOR: always
      CARGO_TARGET_DIR: D:\t

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-gnu

      - name: Determine plugin format
        id: format
        run: |
          TAG="${GITHUB_REF##*/}"
          if [[ "$TAG" == apng-v* ]]; then
            echo "format=png" >> $GITHUB_OUTPUT
          elif [[ "$TAG" == gif-v* ]]; then
            echo "format=gif" >> $GITHUB_OUTPUT
          elif [[ "$TAG" == webp-v* ]]; then
            echo "format=webp" >> $GITHUB_OUTPUT
          elif [[ "$TAG" == avif-v* ]]; then
            echo "format=avif" >> $GITHUB_OUTPUT
          else
            echo "Unknown format"
            exit 1
          fi

      - name: Install NASM (for AVIF)
        if: steps.format.outputs.format == 'avif'
        run: |
          choco install nasm -y
          echo "C:\Program Files\NASM" >> $GITHUB_PATH

      - name: Build plugin
        run: |
          cargo build --release --target x86_64-pc-windows-gnu -p ${{ steps.format.outputs.format }}_output

      - name: Rename artifact
        run: |
          FORMAT=${{ steps.format.outputs.format }}
          DLL_PATH="target/x86_64-pc-windows-gnu/release/${FORMAT}_output.dll"
          AUO2_PATH="${FORMAT}_output.auo2"
          if [ ! -f "$DLL_PATH" ]; then
            echo "Build artifact not found: $DLL_PATH"
            exit 1
          fi
          cp "$DLL_PATH" "$AUO2_PATH"

      - name: Create draft release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          draft: true
          files: |
            *.auo2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
